<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.best.dao.UserMapper">

    <resultMap id="user_map" type="CtUser" extends="user_map_id" autoMapping="true">
        <constructor>
            <arg column="age" javaType="integer" name="age"></arg>
            <arg column="id" javaType="Long" name="id"></arg>
            <arg column="username" javaType="String" name="username"></arg>
        </constructor>
        <id property="id" column="id" javaType="long" jdbcType="NUMERIC"></id>
        <result property="username" column="username" jdbcType="VARCHAR"
                typeHandler="org.apache.ibatis.type.StringTypeHandler"></result>
        <association property="book" select="com.best.dao.BookMapper.getByIdAndName" column="{id = id,userId = id}"></association>
        <discriminator javaType="int" column="sex">
            <case value="1" resultType="female"></case>
            <case value="0" resultType="male"></case>
        </discriminator>
    </resultMap>

    <resultMap id="user_map_id" type="CtUser">
        <id property="id" column="id" javaType="long" jdbcType="NUMERIC"></id>
        <result property="username" column="username" jdbcType="VARCHAR"
                typeHandler="org.apache.ibatis.type.StringTypeHandler"></result>
    </resultMap>

    <cache eviction="LRU"
           blocking="false"
           flushInterval="60000"
           readOnly="false"
           size="1024"
           type="PERPETUAL">
        <property name="name" value="zhangsan"/>
    </cache>

    <!--
    1.eviction存在如下几种表现形式（默认引用LRU）
        typeAliasRegistry.registerAlias("PERPETUAL", PerpetualCache.class)  PERPETUAL 永久缓存
        typeAliasRegistry.registerAlias("FIFO", FifoCache.class);      FIFO  先进先出的缓存方式
        typeAliasRegistry.registerAlias("LRU", LruCache.class);        LRU   保存最近常用的
        typeAliasRegistry.registerAlias("SOFT", SoftCache.class);      SOFT  软引用的缓存策略
        typeAliasRegistry.registerAlias("WEAK", WeakCache.class);  SOFT  弱引用的缓存策略
    2.blocking 是否阻塞（默认是false）
    当指定为true时将采用BlockingCache进行封装，blocking，阻塞的意思，使用BlockingCache会在查询缓存时锁住对应的Key，
    如果缓存命中了则会释放对应的锁，否则会在查询数据库以后再释放锁这样可以阻止并发情况下多个线程同时查询数据，
    详情可参考BlockingCache的源码。
    3.flushInterval (默认空)
    （清空缓存的时间间隔）: 单位毫秒，可以被设置为任意的正整数。  默认情况是不设置，也就是没有刷新间隔，
    缓存仅仅调用语句时刷新
    4.readOnly 是否只读（默认fasle）
        true代表只读，这样调用者拿到的和缓存是同一个地址引用，不安全，但是性能搞
        fasle非只读，这样会通过缓存序列化克隆一个新的对象，安全，但是性能差，默认也是fase
    5.size 缓存引用对象的个数(默认1024)
      要记住你缓存的对象数目和你运行环境的可用内存资源数目。默认值是1024
    6.type:自定义缓存策略（默认PERPETUAL，采用hashMap缓存）
     可指定使用的缓存类，mybatis默认使用HashMap进行缓存
    -->
    <select id="getById" resultMap="user_map" >
        select
        <include refid="${user_table}">
            <property name="alias" value="t1"/>
        </include>
        from ct_user t1 where id = #{id}
    </select>


    <select id="getByIds" resultMap="user_map">
        select
        <include refid="${user_table}">
            <property name="alias" value="t1"/>
        </include>
        from ct_user t1
        where id in
        <foreach collection="ids" item="id" close=")" open="(" separator=",">
             #{id}
        </foreach>
    </select>

    <select id="getWithPo" resultType="ctUser">
        select
        <include refid="${user_table}">
            <property name="alias" value="t"/>
        </include>
        where t.id = #{id}
        <if test="age != 0">
            and t.age = #{age}
        </if>
    </select>


    <sql id="user"> ${alias}.age,${alias}.username,${alias}.id,${alias}.sex</sql>


    <select id="getWithAgeAndId" resultType="ctUser">
        select * from ct_user t
        <trim prefix="where" prefixOverrides="and | or">
            and t.id = #{id}
            <choose>
                <when test="age != 0">
                    and age = #{age}
                </when>
                <otherwise>
                    and age = 18
                </otherwise>
            </choose>

        </trim>
    </select>

</mapper>